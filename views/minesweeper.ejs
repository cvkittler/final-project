<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Final</title>

    <link type="text/css" rel="stylesheet" href="//unpkg.com/bootstrap/dist/css/bootstrap.min.css" />
    <link type="text/css" rel="stylesheet" href="//unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.min.css" />

    <script src="//unpkg.com/vue@latest/dist/vue.min.js"></script>
    <script src="//unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.min.js"></script>

    <script src="//unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue-icons.min.js"></script>

    <style>
        .Game {
            width: 100%;
        }
        .tile-showing-0 {
            background-color: #d3d3d3;
            border: 1px solid #000000;
            color: #d3d3d3;
            font-family: Arial;
            font-size: 20px;
            font-weight: bold;
            width: 50px;
            height: 50px;
            text-decoration: none;
        }
        .tile-showing-1 {
            background-color: #d3d3d3;
            border: 1px solid #000000;
            color: #4389e6;
            font-family: Arial;
            font-size: 20px;
            font-weight: bold;
            width: 50px;
            height: 50px;
            text-decoration: none;
        }
        .tile-showing-2 {
            background-color: #d3d3d3;
            border: 1px solid #000000;
            color: #2fa724;
            font-family: Arial;
            font-size: 20px;
            font-weight: bold;
            width: 50px;
            height: 50px;
            text-decoration: none;
        }
        .tile-showing-3 {
            background-color: #d3d3d3;
            border: 1px solid #000000;
            color: #e01a1a;
            font-family: Arial;
            font-size: 20px;
            font-weight: bold;
            width: 50px;
            height: 50px;
            text-decoration: none;
        }
        .tile-showing-4 {
            background-color: #d3d3d3;
            border: 1px solid #000000;
            color: #2b1b64;
            font-family: Arial;
            font-size: 20px;
            font-weight: bold;
            width: 50px;
            height: 50px;
            text-decoration: none;
        }
        .tile-showing-5 {
            background-color: #d3d3d3;
            border: 1px solid #000000;
            color: #680b0b;
            font-family: Arial;
            font-size: 20px;
            font-weight: bold;
            width: 50px;
            height: 50px;
            text-decoration: none;
        }
        .tile-showing-9 {
            background-color: #d3d3d3;
            border: 1px solid #000000;
            color: #1dcee6;
            font-family: Arial;
            font-size: 20px;
            font-weight: bold;
            width: 50px;
            height: 50px;
            text-decoration: none;
        }
        .tile-hidden {
            background-color: #5e5e5e;
            border: 1px solid #000000;
            color: #5e5e5e;
            font-family: Arial;
            font-size: 15px;
            font-weight: bold;
            width: 50px;
            height: 50px;
            text-decoration: none;
        }

        .tile-marked {
            background-color: #ff0000;
            border: 1px solid #000000;
            color: #ff0000;
            font-family: Arial;
            font-size: 15px;
            font-weight: bold;
            width: 50px;
            height: 50px;
            text-decoration: none;
        }

        .play-button {
            text-align: center;
            margin: auto;
            width: 50%;
            box-shadow: inset 0px 1px 3px 0px #91b8b3;
            background: linear-gradient(to bottom, #768d87 5%, #6c7c7c 100%);
            background-color: #768d87;
            border-radius: 5px;
            border: 1px solid #566963;
            display: inline-block;
            cursor: pointer;
            color: #ffffff;
            font-family: Arial;
            font-size: 15px;
            font-weight: bold;
            padding: 11px 23px;
            text-decoration: none;
            text-shadow: 0px -1px 0px #2b665e;
        }
        #game-board {
            width: 50%;
        }
        .table {
            margin-left: auto;
            margin-right: auto;
        }
    </style>
</head>
<body>
    <main role="main" class="container" id="app">
        <div
                class="Game"
                v-on:keydown="getKeyInputs"
                tabindex="-1"
                :key="componentKey"
        >
            <div>
                <h1>
                    <button v-on:click="clearBoard" class="play-button">
                        Play Mine Sweeper
                    </button>
                </h1>
                <h2 key="Time" v-if="playing">
                    Time: {{ Math.floor(Time / 1000) }}
                </h2>
                <div v-if="playing" id="Game-board">
                    <table class="table">
                        <!-- generate the game board -->
                        <tr v-for="(y, indexY) in Board" :id="indexY" :key="y.id">
                            <td v-for="(x, indexX) in y" :id="indexX" :key="x.id">
                                <button
                                        v-on:click="clickTile"
                                        :id="'x:' + indexX + ',' + 'y:' + indexY"
                                        v-bind:class="getCSS(indexX, indexY)"
                                        :key="buttonsKey"
                                >
                                    {{ x }}
                                </button>
                            </td>
                        </tr>
                    </table>
                </div>

                <!-- say you won or lost and display personl scores -->
                <h1 v-if="!playing && lost">YOU LOSE</h1>
                <h1 v-if="!playing && win">YOU WON</h1>
                <h2 v-if="!playing && win">Score: {{ calcScore() }}</h2>
                <h3 v-if="!playing && (lost || win)">
                    High Score: {{ getHighScore() }}
                </h3>
                <h4 v-if="!playing && (lost || win)">
                    Times Atempted: {{ getTimesPlayed() }}
                </h4>

                <!-- The golbal score board -->
                <table id="score-board">
                    <tr
                            v-for="player in scoreBoard"
                            :id="'plater' + player.player_name"
                            :key="player.id"
                    >
                        <td>{{ player.player_name }}</td>
                        <td>{{ player.value }}</td>
                    </tr>
                </table>
            </div>
        </div>
    </main>
    <script>
        window.app = new Vue({
            el: '#app',
            data() {
                return {
                    DEBUG: false,
                    componentKey: 0,
                    buttonsKey: 0,
                    x_size: 10,
                    y_size: 10,
                    x: 0,
                    y: 0,
                    Time: 0,
                    startTime: 0,
                    isBoardFilled: false,
                    playing: false,
                    lost: false,
                    win: false,
                    scoreBoard: null,
                    Board: [
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    ],
                    Board_mask: [
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    ],
                    numMines: 15,
                };
            },
            methods: {
                getKeyInputs: function (event) {
                    //a little hidden debugging feature
                    let ctrl = event.ctrlKey;
                    switch (event.key) {
                        case "b": //for toggling the debugging
                            if (ctrl) {
                                // press control and b to enable debugging
                                this.DEBUG = !this.DEBUG;
                            }
                            break;
                    }
                },
                getCSS: function (x, y) {
                    // for determining the css to aply to each tile when they are rendered
                    if (this.Board_mask[y][x] === 0) {
                        // case where the tile hasn't been click
                        return "tile-hidden";
                    } else if (this.Board_mask[y][x] === 1) {
                        // case where the tile is showing
                        switch (this.Board[y][x]) {
                            case 0:
                                return "tile-showing-0";
                            case 1:
                                return "tile-showing-1";
                            case 2:
                                return "tile-showing-2";
                            case 3:
                                return "tile-showing-3";
                            case 4:
                                return "tile-showing-4";
                            case 5:
                                return "tile-showing-5";
                            case 6:
                            case 7:
                            case 8:
                            case 9:
                                return "tile-showing-9";
                        }
                    } else {
                        // case where the user flags a mine
                        return "tile-marked";
                    }
                },
                clearBoard: function () {
                    for (let j = 0; j < 10; j++) {
                        for (let k = 0; k < 10; k++) {
                            this.Board[j][k] = 0;
                            this.Board_mask[j][k] = 0;
                        }
                    }
                    this.playing = true;
                    this.startTimer();
                    this.lost = false;
                    this.win = false;
                    this.isBoardFilled = false;
                    this.componentKey += 1;
                },
                fillBoard: function (x_in, y_in) {
                    console.log("FILLING BOARD" + x_in + y_in);
                    //place the mines
                    for (let i = 0; i < this.numMines; i++) {
                        //get a random position
                        let x = Math.floor(Math.random() * 10);
                        let y = Math.floor(Math.random() * 10);
                        //if (this.DEBUG)
                        console.log("x " + x + ", y " + y);
                        if (this.Board[y][x] === -1) {
                            i--;
                        } else if (y == y_in && x == x_in) {
                            i--;
                        } else {
                            this.Board[y][x] = -1;
                            let local_x = x;
                            let local_y = y;
                            //if not at the top row
                            if (y > 0) {
                                local_x = x;
                                local_y = y;
                                local_y--;
                                if (this.Board[local_y][local_x] !== -1) {
                                    this.Board[local_y][local_x] += 1;
                                    // if above corners
                                    local_x = x;
                                    local_x--;
                                    if (x > 0) {
                                        if (this.Board[local_y][local_x] !== -1) {
                                            this.Board[local_y][local_x] += 1;
                                        }
                                    }
                                    local_x = x;
                                    local_x++;
                                    if (x < 9) {
                                        if (this.Board[local_y][local_x] !== -1) {
                                            this.Board[local_y][local_x] += 1;
                                        }
                                    }
                                }
                            }
                            if (y < 9) {
                                local_x = x;
                                local_y = y;
                                local_y++;
                                if (this.Board[local_y][local_x] !== -1) {
                                    this.Board[local_y][local_x] += 1;
                                    // if above corners
                                    local_x = x;
                                    local_x--;
                                    if (x > 0) {
                                        if (this.Board[local_y][local_x] !== -1) {
                                            this.Board[local_y][local_x] += 1;
                                        }
                                    }
                                    local_x = x;
                                    local_x++;
                                    if (x < 9) {
                                        if (this.Board[local_y][local_x] !== -1) {
                                            this.Board[local_y][local_x] += 1;
                                        }
                                    }
                                }
                            }
                            //left
                            if (x > 0) {
                                local_x = x;
                                local_x--;
                                local_y = y;
                                if (this.Board[local_y][local_x] !== -1) {
                                    this.Board[local_y][local_x] += 1;
                                }
                            }
                            //right
                            if (x < 9) {
                                local_x = x;
                                local_x++;
                                local_y = y;
                                if (this.Board[local_y][local_x] !== -1) {
                                    this.Board[local_y][local_x] += 1;
                                }
                            }
                        }
                    }
                },
                checkWin: function () {
                    let markedBombs = 0;
                    for (let j = 0; j < 10; j++) {
                        for (let k = 0; k < 10; k++) {
                            if (this.Board_mask[k][j] === 2) {
                                //if marked
                                if (this.Board[k][j] !== -1) {
                                    //if not bomb
                                    console.log("Havent Won");
                                    return false;
                                } else {
                                    markedBombs++;
                                }
                            }
                        }
                    }
                    if (markedBombs === this.numMines) {
                        console.log(" Won");
                        return true;
                    } else {
                        console.log("Havent Won");
                        return false;
                    }
                },
                clickTile: function (event) {
                    if (this.DEBUG) console.log(event);

                    //tile
                    let x = event.currentTarget.parentElement.id;
                    //array
                    let y = event.currentTarget.parentElement.parentElement.id;
                    //fill mines
                    if (!this.isBoardFilled) {
                        this.fillBoard(x, y);
                        this.isBoardFilled = true;
                    }

                    if (event.ctrlKey) {
                        if (this.Board_mask[y][x] === 2) {
                            this.Board_mask[y][x] = 0;
                        } else if (this.Board_mask[y][x] === 0) {
                            this.Board_mask[y][x] = 2;
                        }
                        this.componentKey += 1;
                    }
                    //checking the current tile
                    else if (this.Board[y][x] !== -1 && this.playing) {
                        this.Board_mask[y][x] = 1;
                        if (this.Board[y][x] === 0) {
                            this.checkAdj(y, x, 0);
                        }
                    } else {
                        // clicked on a mine so you lose
                        this.playing = false;
                        this.lost = true;
                        this.submitScore(0);
                    }
                    if (this.checkWin()) {
                        //won the game
                        this.playing = false;
                        this.win = true;
                        this.submitScore(this.calcScore());
                    }

                    this.componentKey += 1;
                },
                checkAdj: function (y, x, deep) {
                    deep += 1;
                    if (this.DEBUG)
                        console.log(
                            "x:" +
                            x +
                            "|y:" +
                            y +
                            "|" +
                            deep +
                            " Deep|" +
                            "Mask=" +
                            this.Board_mask[y][x] +
                            "|value=" +
                            this.Board[y][x]
                        );

                    let local_x = x;
                    let local_y = y;

                    //up
                    if (y > 0) {
                        local_y = y;
                        local_y--;
                        local_x = x;
                        if (
                            //not a bomb
                            this.Board[local_y][local_x] >= 0 &&
                            // if exposed
                            this.Board_mask[local_y][local_x] === 0
                        ) {
                            this.Board_mask[local_y][local_x] = 1;
                            if (this.Board[local_y][local_x] === 0) {
                                this.checkAdj(local_y, local_x, deep);
                            }
                        }
                    }
                    //down
                    if (y < 9) {
                        local_y = y;
                        local_y++;
                        local_x = x;
                        if (
                            this.Board[local_y][local_x] >= 0 &&
                            this.Board_mask[local_y][local_x] === 0
                        ) {
                            this.Board_mask[local_y][local_x] = 1;
                            if (this.Board[local_y][local_x] === 0) {
                                this.checkAdj(local_y, local_x, deep);
                            }
                        }
                    }
                    //right
                    if (x > 0) {
                        local_y = y;
                        local_x = x;
                        local_x--;
                        if (
                            this.Board[local_y][local_x] >= 0 &&
                            this.Board_mask[local_y][local_x] === 0
                        ) {
                            this.Board_mask[local_y][local_x] = 1;
                            if (this.Board[local_y][local_x] === 0) {
                                this.checkAdj(local_y, local_x, deep);
                            }
                        }
                    }
                    //left
                    if (x < 9) {
                        local_y = y;
                        local_x = x;
                        local_x++;
                        if (
                            this.Board[local_y][local_x] >= 0 &&
                            this.Board_mask[local_y][local_x] === 0
                        ) {
                            this.Board_mask[local_y][local_x] = 1;
                            if (this.Board[local_y][local_x] === 0) {
                                this.checkAdj(local_y, local_x, deep);
                            }
                        }
                    }
                    //top right
                    if (x > 0 && y > 0) {
                        local_y = y;
                        local_y--;
                        local_x = x;
                        local_x--;
                        if (
                            this.Board[local_y][local_x] >= 0 &&
                            this.Board_mask[local_y][local_x] === 0
                        ) {
                            this.Board_mask[local_y][local_x] = 1;
                            if (this.Board[local_y][local_x] === 0) {
                                this.checkAdj(local_y, local_x, deep);
                            }
                        }
                    }
                    //top left
                    if (x < 9 && y > 0) {
                        local_y = y;
                        local_y--;
                        local_x = x;
                        local_x++;
                        if (
                            this.Board[local_y][local_x] >= 0 &&
                            this.Board_mask[local_y][local_x] === 0
                        ) {
                            this.Board_mask[local_y][local_x] = 1;
                            if (this.Board[local_y][local_x] === 0) {
                                this.checkAdj(local_y, local_x, deep);
                            }
                        }
                    }
                    //bottom left
                    if (x < 9 && y < 9) {
                        local_y = y;
                        local_y++;
                        local_x = x;
                        local_x++;
                        if (
                            this.Board[local_y][local_x] >= 0 &&
                            this.Board_mask[local_y][local_x] === 0
                        ) {
                            this.Board_mask[local_y][local_x] = 1;
                            if (this.Board[local_y][local_x] === 0) {
                                this.checkAdj(local_y, local_x, deep);
                            }
                        }
                    }
                    //bottom right
                    if (x > 0 && y < 9) {
                        local_y = y;
                        local_y++;
                        local_x = x;
                        local_x--;
                        if (
                            this.Board[local_y][local_x] >= 0 &&
                            this.Board_mask[local_y][local_x] === 0
                        ) {
                            this.Board_mask[local_y][local_x] = 1;
                            if (this.Board[local_y][local_x] === 0) {
                                this.checkAdj(local_y, local_x, deep);
                            }
                        }
                    }
                },
                startTimer: function () {
                    let d = new Date();
                    this.startTime = d.getTime();
                    this.updateTime();
                },
                updateTime: function () {
                    if (this.playing) {
                        let d = new Date();
                        let timeDiff = d.getTime() - this.startTime;
                        this.Time = timeDiff;
                        setTimeout(() => {
                            this.updateTime();
                        }, 200);
                    }
                },
                calcScore: function () {
                    return Math.floor(6000000 / this.Time);
                },
                submitScore: function (score) {
                    console.log("Submiting score of: ", score);
                    // Simple POST request with a JSON body using fetch
                    const requestOptions = {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ value: this.score }),
                    };
                    fetch("/api/minesweeper/score", requestOptions)
                        .then((response) => response.json())
                        .then((data) => console.log("Sent Score" + data));
                },
                renderScoreBoard: function () {
                    const requestOptions = {
                        method: "GET",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({}),
                    };
                    fetch("/api/minesweeper/all_scores", requestOptions)
                        .then((response) => response.json())
                        .then((data) => (this.scoreBoard = data));
                },
                getHighScore: function () {
                    let highScore = -1;
                    fetch("/api/minesweeper/score", {
                        method: "GET",
                    })
                        .then((res) => res.json())
                        .then((j) => (highScore = j.body));
                    return highScore;
                },
                getTimesPlayed: function () {
                    let plays = -1;
                    fetch("/api/minesweeper/play_count", {
                        method: "GET",
                    })
                        .then((res) => res.json())
                        .then((j) => (plays = j.body));
                    return plays;
                },
            },
            created() {
                this.renderScoreBoard();
            },
        });
    </script>
</body>
</html>